/* * Player.as *  * Copyright (c) 2012 Hendrik Holtmann * All rights reserved. *  * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: *  * Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. *  * Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. * */package {	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.display.Stage;	import flash.geom.Rectangle;	import flash.events.TimerEvent;	import flash.utils.Timer;	import Tooltip;	import flash.geom.*;		public class Player	{		private var c:Object;		public var s:Stage;		public var capActive:Boolean;		private var _timer:Timer = new Timer(500, 1);		private var _tooltip:Tooltip;		private var buttonX:Number;		private var buttonY:Number;		private var buttonWidth:Number;		private var toolTipText:String				public function Player(stage:Stage)		{			capActive = false;			s = stage;			}				private function stringHexToInt(str:String):int{			return parseInt("0x"+str.slice(1),16);		}				public function applySkin() {			if (c.jsonObject['slideshow']['styleTemplate'] && c.jsonObject['slideshow']['styleTemplate']['playerBackground']) {								var playerBg:ColorTransform = new ColorTransform();				playerBg.color = stringHexToInt(c.jsonObject['slideshow']['styleTemplate']['playerBackground']);				var buttonBgColor:ColorTransform = new ColorTransform();				buttonBgColor.color = stringHexToInt(c.jsonObject['slideshow']['styleTemplate']['buttonBackground']);								var timeCodeTextColor:ColorTransform = new ColorTransform();				timeCodeTextColor.color = stringHexToInt(c.jsonObject['slideshow']['styleTemplate']['timecodeColor']);								var sliderTintColor:ColorTransform = new ColorTransform();				sliderTintColor.color = stringHexToInt(c.jsonObject['slideshow']['styleTemplate']['sliderColor']);;							c.playerBg_mc.transform.colorTransform = playerBg; 					c.playBtn_mc.getChildAt(0).transform.colorTransform = buttonBgColor;				c.pauseBtn_mc.getChildAt(0).transform.colorTransform = buttonBgColor;				c.stopBtn_mc.getChildAt(0).transform.colorTransform = buttonBgColor;				c.thumbBtn_mc.getChildAt(0).transform.colorTransform = buttonBgColor;				c.captionBtn_mc.getChildAt(0).transform.colorTransform = buttonBgColor;								c.timeSlider.transform.colorTransform = sliderTintColor;				c.timeCodeLabel.transform.colorTransform = timeCodeTextColor;			}					}				private function initControls() {						c.playBtn_mc.addEventListener(MouseEvent.MOUSE_OVER, btnOver);			c.playBtn_mc.addEventListener(MouseEvent.MOUSE_OUT, btnOut);			c.playBtn_mc.addEventListener(MouseEvent.CLICK, c.playSlideShow);						c.pauseBtn_mc.addEventListener(MouseEvent.MOUSE_OVER, btnOver);			c.pauseBtn_mc.addEventListener(MouseEvent.MOUSE_OUT, btnOut);			c.pauseBtn_mc.addEventListener(MouseEvent.CLICK, c.pauseSlideShow);						c.stopBtn_mc.addEventListener(MouseEvent.MOUSE_OVER, btnOver);			c.stopBtn_mc.addEventListener(MouseEvent.MOUSE_OUT, btnOut);			c.stopBtn_mc.addEventListener(MouseEvent.CLICK, c.stopSlideShow);						c.thumbBtn_mc.addEventListener(MouseEvent.MOUSE_OVER, btnOver);			c.thumbBtn_mc.addEventListener(MouseEvent.MOUSE_OUT, btnOut);			c.thumbBtn_mc.addEventListener(MouseEvent.CLICK, c.gridViewToggle);						c.captionBtn_mc.addEventListener(MouseEvent.MOUSE_OVER, captionOver);			c.captionBtn_mc.addEventListener(MouseEvent.MOUSE_OUT, captionOut);						c.captionBtn_mc.addEventListener(MouseEvent.CLICK, captionToggle);			//c.captionBtn_mc.addEventListener(MouseEvent.CLICK, c.gridViewToggle);		}				public function set controller(controller:Object):void {			this.c = controller;			this.initControls();		}				public function showCaptions()		{			c.captionBtn_mc.gotoAndPlay("over");			capActive = true;			c.captionArea.visible = true;		}				public function captionToggle(event:MouseEvent):void		{			if (!capActive) {				event.currentTarget.gotoAndPlay("over");				capActive = true;				trace(c.captionArea.captionText.text);				c.captionArea.visible = true;			} else {				event.currentTarget.gotoAndPlay("out");				c.captionArea.visible = false;				capActive = false;							}					}				function removeToolTip()		{			 if (_tooltip)            {                 s.removeChild(_tooltip);                _tooltip = null;                _timer.removeEventListener(TimerEvent.TIMER_COMPLETE, ShowTooltip);                _timer.reset();            }		}				function captionOver(event:MouseEvent):void		{			removeToolTip();			buttonX = event.target.localToGlobal(new Point()).x;			buttonY = event.target.localToGlobal(new Point()).y;			buttonWidth = event.target.width;			if (capActive) {				toolTipText = "Cap. off";			} else {				toolTipText = "Cap. on";			}			_timer.addEventListener(TimerEvent.TIMER_COMPLETE, ShowTooltip, false, 0, true);            _timer.start();		}				function captionOut(event:MouseEvent):void		{			removeToolTip();		}				function btnOver(event:MouseEvent):void		{			removeToolTip();			event.currentTarget.gotoAndPlay("over");			buttonX = event.target.localToGlobal(new Point()).x;			buttonY = event.target.localToGlobal(new Point()).y;			buttonWidth = event.target.width;						if (event.currentTarget == c.playBtn_mc) {				toolTipText = "Play";			} else if (event.currentTarget == c.pauseBtn_mc) {				toolTipText = "Pause";							} else if (event.currentTarget == c.stopBtn_mc) {				toolTipText = "Stop";											} else if (event.currentTarget == c.thumbBtn_mc) {				toolTipText = "Thumbs";											}						_timer.addEventListener(TimerEvent.TIMER_COMPLETE, ShowTooltip, false, 0, true);            _timer.start();		}				function btnOut(event:MouseEvent):void		{      		event.currentTarget.gotoAndPlay("out");  			removeToolTip();		}				function ShowTooltip(e:TimerEvent):void		{			_tooltip = new Tooltip(50, 18, 4, toolTipText, 0x222222, 0xFFFFFF, 1, true);   			 s.addChild(_tooltip);			_tooltip.y = buttonY - _tooltip.height -5;   		    _tooltip.x = (buttonX + (buttonWidth/2)) - _tooltip.width/2;		}	}	}