/* * mmslides.as *  * Copyright (c) 2012 Hendrik Holtmann * All rights reserved. *  * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: *  * Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. *  * Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. * */package {	import flash.display.MovieClip;	import flash.media.Sound;	import flash.events.*;	import flash.filters.*;	import flash.media.SoundChannel;	import fl.events.SliderEvent;	import fl.controls.Slider;	import flash.utils.Timer;	import fl.controls.Button;	import JSONLoader;	import AudioLoader;	import SoundController;	import Utils;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.StageDisplayState;	import fl.motion.Source;	import com.greensock.loading.*;	import com.greensock.layout.*;	import com.greensock.events.LoaderEvent;	import flash.display.DisplayObject;	import com.greensock.*;	import com.greensock.easing.*;	import fl.controls.NumericStepper;	import CustomImageLoader;	import GridView;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import fl.motion.Color;	import Player;	import Tooltip;	import flash.display.Shape;	import flash.text.TextFormat;	import flash.display.LoaderInfo;	import com.greensock.plugins.TweenPlugin; 	import com.greensock.plugins.AutoAlphaPlugin; 		public class mmslides extends MovieClip	{		//Variables		private var jsonLoader:JSONLoader;		public var jsonObject:Object = new Object();		private var modelString:String;		private var soundObject:Sound;		private var soundController:SoundController;		private var mainTimer:Timer;		private var showLength:Number;		private var hasAudio:Boolean;		private var isRunning:Boolean;		private var isFullScreen:Boolean;		private var currTime:Number = 0;		private var glowArray:Array = [new GlowFilter()];		private var numSlides:Number;		private var currSlide:Number;		private var imagesSources:Array = new Array();		private var images;		///loader		private var mainQueue:LoaderMax;		private var startQueue:LoaderMax;		private var soundQueue:LoaderMax;		private var thumbQueue:LoaderMax;		private var mp3Loader:MP3Loader;		private var soundInit:Boolean;		private var startInit:Boolean;		private var activeIndex:Number;		//contentDisplay		private var contentAreaContainer:Sprite;		private var contentArea:AutoFitArea;		private var currentLoader:CustomImageLoader;		private var nextLoader:CustomImageLoader;		private var transitionLoader:CustomImageLoader;		private var contentMask:ContentMask;		private var contentWidth:Number;		private var contentHeight:Number;		public var captionArea:CaptionArea;		//Timeline		private var timeLine:TimelineLite;		private var timeLineLength:Number;				//kenBurnsTimeLine		private var kenBurnsTimeLine:TimelineLite;		private var captionTimeLine:TimelineLite;		private var animationTimeLine:TimelineLite;				//Buttons		private var playButton:Button;		private var fullScreenButton:Button;		private var gridButton:Button;		private var captionButton:Button;		//GridView		private var gridView:GridView;		//Player		public var player:Player;		var pre:PreLoader;				//loader info		var flashvars:Object;		var folder:String;				var mainWidth:Number;		var mainHeight:Number;						public function mmslides()		{						TweenPlugin.activate([AutoAlphaPlugin]);						flashvars = LoaderInfo(this.root.loaderInfo).parameters;			if (flashvars['folder']) {				folder = flashvars['folder'];			} else {				folder ="";			}						modelString = folder+"config/jsonconfig.js";						jsonLoader = new JSONLoader(modelString);			jsonLoader.addEventListener("dataReady", collectJSONData);			jsonLoader.addEventListener("dataFailed", doJSONFailed);			timeCodeLabel.text = "...";			isFullScreen = false;						mainTimer = new Timer(100);			mainTimer.addEventListener(TimerEvent.TIMER, timerFired);			timeLine = new TimelineLite({paused:true});						player = new Player(stage);			player.controller = this;			setUpGUI();			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.EXACT_FIT;			stage.addEventListener(Event.RESIZE, updateSize);			stage.dispatchEvent(new Event(Event.RESIZE));			activeIndex = -1;		}		private function setUpGUI()		{			timeCodeLabel.text = "...";			contentAreaContainer = new Sprite();			contentAreaContainer.x = 0;			contentAreaContainer.visible = true;			contentAreaContainer.y = 0;			addChild(contentAreaContainer);			contentMask = new ContentMask();			contentMask.x = 0;			contentMask.y = 0;			contentMask.width = stage.stageWidth;			contentMask.height = stage.stageHeight - 35;			contentAreaContainer.addChild(contentMask);			contentArea = new AutoFitArea(contentAreaContainer,0,0,640,480);			//attach a CHANGE event listener to the area			contentArea.addEventListener(Event.CHANGE, onAreaUpdate);			contentArea.preview = false;		}		function onAreaUpdate(event:Event):void		{			var object:DisplayObject = event.currentTarget.getAttachedObjects()[0];			if (object != null)			{				contentWidth = object.width;				contentHeight = object.height;			}		}		private function updateSize(e:Event):void		{						contentArea.width = stage.stageWidth;			contentArea.height = stage.stageHeight - 35;			contentMask.width = stage.stageWidth;			contentMask.height = stage.stageHeight - 35;		}		private function initGUI()		{			//remove progress handler			player.applySkin();			timeSlider.minimum = 0;			timeSlider.maximum = jsonObject['data']['length'];			timeCodeLabel.text = "00:00";			var lblformat:TextFormat = new TextFormat();			lblformat.color = 0xFFFFFF;			timeCodeLabel.setStyle("textFormat", lblformat);						timeSlider.addEventListener(SliderEvent.CHANGE,changedTimeSlider);			timeSlider.enabled = true;			showLength = jsonObject['data']['length'];			contentArea.dispatchEvent(new Event(Event.CHANGE));			trace("XXXXXXXXX = >  Data for slideshow"+jsonObject['slideshow']['showCaptionsByDefault']);			if (jsonObject['slideshow']['showCaptionsByDefault']== true) {				player.showCaptions();			}						if (jsonObject['slideshow']['autoPlay']== true) {				this.playPauseSlideShow(null);			}					}				private function buttonMouseOver(e:MouseEvent):void		{			e.currentTarget.filters = glowArray;		}		private function buttonMouseOut(e:MouseEvent):void		{			e.currentTarget.filters = [];		}				private function captionToggle(e:MouseEvent):void		{			trace("Caption Toogle");		}		function gridViewToggle(event:MouseEvent):void		{			if (gridView == null)			{				gridView = new GridView(jsonObject['data']['slides'],stage.stageWidth * 0.8,stage.stageHeight * 0.8,folder,thumbQueue);				gridView.name = "thumbGrid";				gridView.x = stage.stageWidth * 0.1;				gridView.y = stage.stageWidth * 0.05;				addChild(gridView);			}			else			{				removeChild(gridView);				gridView = null;			}		}		function fullScreenToggle(event:MouseEvent):void		{			if (isFullScreen == false)			{				isFullScreen = true;				stage.displayState = StageDisplayState.FULL_SCREEN;			}			else			{				isFullScreen = false;				stage.displayState = StageDisplayState.NORMAL;			}		}						public function playSlideShow(event:MouseEvent):void		{			if (hasAudio && !isRunning)			{				mp3Loader.gotoSoundTime(currTime/1000,false);				mp3Loader.playSound();			} 						if (! isRunning)			{				mainTimer.start();				timeLine.play();				isRunning = true;			}		}				public function stopSlideShow(event:MouseEvent):void		{			if (hasAudio)			{				mp3Loader.gotoSoundTime(0,false);				mp3Loader.pauseSound();			} 			timeSlider.value = 0;			currTime = 0;			timeLine.currentProgress = 0;			timeLine.stop();			mainTimer.stop();			isRunning = false;			timeCodeLabel.text = "00:00";		}				public function pauseSlideShow(event:MouseEvent):void		{			if (hasAudio && isRunning)			{				mp3Loader.pauseSound();			} 						if (isRunning)			{				timeLine.pause();				mainTimer.stop();				isRunning = false;			}		}				public function playPauseSlideShow(event:MouseEvent):void		{			if (hasAudio)			{				if (isRunning)				{					//playButton.setStyle("icon", iconPlay);					mp3Loader.pauseSound();				}				else				{					//playButton.setStyle("icon", iconPause);					mp3Loader.gotoSoundTime(currTime/1000,false);					mp3Loader.playSound();				}			}			if (! isRunning)			{				mainTimer.start();				timeLine.play();				isRunning = true;			}			else			{				timeLine.pause();				mainTimer.stop();				isRunning = false;			}		}		private function changedTimeSlider(event:Event ):void		{			var slider:Slider = Slider(event.currentTarget);			currTime = slider.value;			timeCodeLabel.text = Utils.convertMillisecondsToMMSS(currTime);			var total:Number = jsonObject['data']['length'];			timeLine.currentProgress = slider.value / timeLineLength;			if (isRunning && hasAudio)			{				mp3Loader.gotoSoundTime(slider.value/1000,true);			}			else			{				timerFired(null);			}		}		private function slideIndexForTime(time:Number):Number		{			var retIndex:Number = -1;			for (var i:Number=0; i<numSlides; i++)			{				if (time >= jsonObject['data']['slides'][i]['timestamp'])				{					retIndex = i;				}			}			return retIndex;		}		private function timerFired(event:TimerEvent):void		{			currTime = currTime + 100;			timeCodeLabel.text = Utils.convertMillisecondsToMMSS(currTime);			timeSlider.value = currTime;//			timeLine.currentTime = currTime;			if (currTime >= showLength)			{				if (jsonObject['slideshow']['loop']== true) {					timeSlider.value = 0;					timeSlider.dispatchEvent(new Event(Event.CHANGE));				} else {					playPauseSlideShow(null);				}			}		}		/*		Loader methods		*/		private function collectJSONData(evt:Event):void		{			jsonObject = jsonLoader.returnJsonDecoded();			var audioFile:String = null;			if (jsonObject['data']['meta']) {				if (jsonObject['data']['meta']['audio']) {					 audioFile = jsonObject['data']['meta']['audio']['file'];				}			}			var firstpic:String = jsonObject['data']['slides'][0]['file'];			numSlides = jsonObject['data']['slides'].length;			if (audioFile != null)			{				hasAudio = true;			}			else			{				hasAudio = false;				soundInit = true;			}			mainQueue = new LoaderMax({name:"imageQueue",onProgress:progressHandler,onComplete:completeHandler,onError:errorHandler});			startQueue = new LoaderMax({name:"startQueue",onProgress:progressHandler,onComplete:completeHandler,onError:errorHandler});			thumbQueue = new LoaderMax({name:"thumbQueue",onProgress:progressHandler,onComplete:completeHandler,onError:errorHandler});						if (hasAudio)			{				soundQueue = new LoaderMax({name:"soundQueue",onProgress:progressHandlerSound,onComplete:completeHandler,onError:errorHandler});				mp3Loader = new MP3Loader(folder+"audio/" + jsonObject['data']['meta']['audio']['file'],{name:"audio",autoPlay:false,estimatedBytes:1024*1024*3});				mp3Loader.addEventListener(LoaderEvent.INIT,soundInited);				soundQueue.append(mp3Loader);			}			var timestamp:Number = 0;			var jumpstamp:Number = 0;			var prevTransLength:Number = 0;			for (var i:Number=0; i<numSlides; i++)			{				jsonObject['data']['slides'][i]['timestamp'] = timestamp;				jsonObject['data']['slides'][i]['jumpstamp'] = timestamp + prevTransLength;				trace("Slide"+i+" timestamp"+jsonObject['data']['slides'][i]['timestamp']/1000);				trace("Slide"+i+" jumpstamp"+jsonObject['data']['slides'][i]['jumpstamp']/1000);				jsonObject['data']['slides'][i]['index'] = i;				timestamp = timestamp + jsonObject['data']['slides'][i]['length'];				if (jsonObject['data']['slides'][i]['transition'] != null) {					prevTransLength = jsonObject['data']['slides'][i]['transition']['length'];						} else {					prevTransLength = 0;				}				var loader:CustomImageLoader = new CustomImageLoader(folder+"images/640/" + jsonObject['data']['slides'][i]['file'],{name:i});				loader.setSlideObject(jsonObject['data']['slides'][i]);								var thumbLoader:ImageLoader = new ImageLoader(folder+"thumbs/"+jsonObject['data']['slides'][i]['file']+".thumb.jpg",{name:"thumb"+i, width:75, height:75});								if (thumbLoader && thumbQueue) {					thumbQueue.append(thumbLoader);				}								if (i < 4)				{					startQueue.append(loader);				}				else				{					mainQueue.append(loader);				}							}			timeLineLength = timestamp;			trace("Length of timeline according to data model"+timeLineLength);			if (hasAudio)			{				startQueue.prepend(soundQueue);			}			mainQueue.prepend(startQueue);			mainQueue.append(thumbQueue);			mainQueue.load();			this.initTimeLine();		}				private function getTweenData(tween):void		{				   trace("\ntween target " + tween.target);		   trace("tween target name " + tween.target.name);		   trace("duration " + tween.duration);		   for (var i in tween.vars)		   {		      trace("\t" + i + ":" + tween.vars[i]);		   }		}		private function printTimeLine() 		{			var allTweens:Array = timeLine.getChildren(false, true, false);			var numTweens:int = allTweens.length;			for(var n:int = 0; n<numTweens; n++){				trace("Data for "+n);			   getTweenData(allTweens[n]);			}		}		private function kenBurnsForLoader(loader:CustomImageLoader):Object {			var kenburns:Object = loader.slideObject()['kenburns'];			trace("Get Ken Burns data for"+loader.content.name);						var startScale:Number = (459/kenburns['s.w']);			var scx:Number = kenburns['s.x']*(contentArea.width/459)*startScale;			var scy:Number = kenburns['s.y']*(contentArea.height/344)*startScale;			var endScale:Number = (459/kenburns['e.w']);			var ecx:Number = kenburns['e.x']*(contentArea.width/459)*endScale;			var ecy:Number = kenburns['e.y']*(contentArea.height/344)*endScale;						var calc:Object= new Object();			calc["scx"] = scx;			calc["scy"] = scy;			calc["startScale"] = startScale;			calc["ecx"] = ecx;			calc["ecy"] = ecy;			calc["endScale"] = endScale;			return calc;		}				private function initTimeLine()		{					     kenBurnsTimeLine = new TimelineLite({paused:false});		     captionTimeLine = new TimelineLite({paused:false});		     animationTimeLine = new TimelineLite({paused:false});			contentAreaContainer.mask = contentMask;						captionArea = new CaptionArea();			captionArea.width = 640;			captionArea.alpha = 0.8;			captionArea.visible = false;			captionArea.x = (stage.stageWidth-captionArea.width)/2;			captionArea.y = stage.stageHeight - 90;			captionArea.captionObject = jsonObject['data']['slides'];			captionArea.captionIndex = 0;						var counter:int = numSlides - 1;			var offsetPrev:Number = 0;						//add containers			while (counter>=0)			{				var imageLoader:CustomImageLoader = mainQueue.getLoader(String(counter));								var slideContainer:Sprite = new Sprite();				slideContainer.graphics.beginFill(0xFFFFFF);				slideContainer.graphics.drawRect(0, 0, 640, 480);				slideContainer.addChild(imageLoader.content);				slideContainer.alpha = 0;				contentAreaContainer.addChild(slideContainer);				contentArea.attach(slideContainer, {scaleMode:ScaleMode.PROPORTIONAL_INSIDE, crop:false});				counter--;			}						counter = 0;			var lastSlideTransLength:Number = 0;						var timeTotal:Number = 0;			//add slides, captions & animation PlaceHolders			while(counter<numSlides) {				var slideTransLength:Number = 0;				var slideLoader:CustomImageLoader = mainQueue.getLoader(String(counter));				if (slideLoader.slideObject()['transition']!=null && slideLoader.slideObject()['transition']['type']!="notransition") {					slideTransLength = slideLoader.slideObject()['transition']['length'];				}				//kenBurnsTimeLine.append(TweenLite.to(slideLoader.content.parent,slideLoader.slideObject()['length']/1000+(slideTransLength/1000),{alpha:0}),-lastSlideTransLength/1000);								var caption:String = slideLoader.slideObject()['caption'];				captionTimeLine.append(TweenLite.to(captionArea,0,{captionIndex:counter+1,immediateRender:false}),(slideLoader.slideObject()['length'])/1000);				kenBurnsTimeLine.addLabel("KenBurns"+counter,timeTotal/1000);				timeTotal = timeTotal + slideLoader.slideObject()['length'];				trace("Saving labels at"+timeTotal);				animationTimeLine.addLabel("Transition"+counter,timeTotal/1000);				counter++;				lastSlideTransLength = slideTransLength;			}												trace("TimeLine after initial build "+kenBurnsTimeLine.duration);						//build animations			counter = 0;			while (counter<numSlides)			{				var loader:CustomImageLoader = mainQueue.getLoader(String(counter));				if (counter == 0) {					animationTimeLine.append(TweenLite.to(loader.content.parent,0,{alpha:1,immediateRender:false}));					loader.content.parent.alpha = 1;				}								var nextLoader:CustomImageLoader = null;				var previousLoader:CustomImageLoader = null;				if (counter + 1 < numSlides)				{					nextLoader = mainQueue.getLoader(String(counter + 1));				}				if (counter > 0)				{					previousLoader = mainQueue.getLoader(String(counter - 1));				}				var nonAnimated:Number = loader.slideObject()['length'];				var kenburns:Object = loader.slideObject()['kenburns'];				var isKenBurns = loader.slideObject()['iskenburns'];				if (isKenBurns == null && kenburns != null) {					isKenBurns = true;				} else if (isKenBurns == null && kenburns==null){					isKenBurns = false;				}								var transition:Object = loader.slideObject()['transition'];				var transitionLength:Number = 0;				var transitionType:String = "";				var renderKenBurns:Boolean = false;				var nextIsKenBurns:Boolean = false;				var offset:Number = 0;				if (transition != null)				{					if (transition['type']!="notransition") {						transitionLength = (transition['length'])/1000;						transitionType = transition['type'];						nonAnimated = nonAnimated - transitionLength;					}				}								if (loader != null) {						if (loader.slideObject()['kenburns'] != null && loader.slideObject()['iskenburns'] == true) {							renderKenBurns = true;						}				}								//renderKenBurns = false;				if (renderKenBurns == true) { 						var kenBurnsCurrent:Object = this.kenBurnsForLoader(loader);						var kensBurnsTweenVars:Object = {overwrite:false,ease:Linear.easeNone,delay:0,scaleX:kenBurnsCurrent['endScale'],scaleY:kenBurnsCurrent['endScale'],x:-kenBurnsCurrent['ecx'],y:-kenBurnsCurrent['ecy']};																	kenBurnsTimeLine.insert(TweenLite.to(loader.content,0,{x:-kenBurnsCurrent['scx'],y:-kenBurnsCurrent['scy'],scaleX:kenBurnsCurrent['startScale'],														  scaleY:kenBurnsCurrent['startScale'],immediateRender:false}),"KenBurns"+counter);						kenBurnsTimeLine.insert(TweenLite.to(loader.content,loader.slideObject()['length']/1000,kensBurnsTweenVars),"KenBurns"+counter);				}														if (transitionType == "") {					animationTimeLine.insert(TweenLite.to(loader.content.parent, 0,{alpha:0,immediateRender:false}),"Transition"+counter);					if (nextLoader) {						animationTimeLine.insert(TweenLite.to(nextLoader.content.parent, 0,{alpha:1,immediateRender:false}),"Transition"+counter);					}				}				if ((transitionType == "crossfade") || (transitionType == "straightcut" && renderKenBurns) ) {					trace("Crossfade with length"+transitionLength);					animationTimeLine.insert(TweenLite.to(loader.content.parent, transitionLength ,{alpha:0}),"Transition"+counter);					if (nextLoader) {						animationTimeLine.insert(TweenLite.to(nextLoader.content.parent, 0,{alpha:1,immediateRender:false}),"Transition"+counter);					}				}				if (transitionType == "fade") {					animationTimeLine.insert(TweenLite.to(loader.content.parent, transitionLength/2 ,{alpha:0}),"Transition"+counter);					var timeCode = animationTimeLine.getLabelTime("Transition"+counter) + (transitionLength/2);					if (nextLoader) {						animationTimeLine.insert(TweenLite.to(nextLoader.content.parent, transitionLength/2,{alpha:1}),timeCode);					}				}								if (transitionType == "straightcut")				{						if (!renderKenBurns) {						animationTimeLine.append(TweenLite.to(nextLoader.content.parent, 0, {alpha:1,immediateRender:false}));											animationTimeLine.insertMultiple([	TweenLite.from(nextLoader.content.parent, transitionLength, {x:stage.stageWidth}),															TweenLite.to(loader.content.parent, transitionLength, {x:-stage.stageWidth})],															"Transition"+counter, "normal",0);					} else {						var kenBurnsLoader:Object = this.kenBurnsForLoader(loader);						var startScale:Number = 1;						if (nextLoader.slideObject()['kenburns']!=null && loader.slideObject()['iskenburns']== true ) {							var kenBurnsNextLoader:Object = this.kenBurnsForLoader(nextLoader);							startScale = kenBurnsNextLoader['startScale'];						}						animationTimeLine.append(TweenLite.to(nextLoader.content.parent, 0, {alpha:1,immediateRender:false}));						animationTimeLine.insertMultiple([TweenLite.from(nextLoader.content.parent, transitionLength, {x:stage.stageWidth*startScale}),															TweenLite.to(loader.content.parent, transitionLength, {x:-stage.stageWidth*kenBurnsLoader['endScale']})],															"Transition"+counter, "normal",0);					}				}				counter++;			}						//merge the timeLines			timeLine.appendMultiple([kenBurnsTimeLine,animationTimeLine,captionTimeLine], 0,"normal",0);						trace("==>END Slide TimeLine duration: "+kenBurnsTimeLine.duration);			trace("==> END Animation TimeLine duration: "+animationTimeLine.duration);			trace("==> END Caption TimeLine duration: "+captionTimeLine.duration);						pre = new PreLoader();			pre.width = stage.stageWidth;			pre.height = stage.stageHeight;			pre.addEventListener("addedToStage",preLoaderAdded);			addChild(pre);						//this.printTimeLine();			contentAreaContainer.addChild(captionArea);		}		private function preLoaderAdded(e:Event):void		{			pre.progressLabel.text = "0%";			var lblformat:TextFormat = new TextFormat();			lblformat.color = 0xFFFFFF;			lblformat.font = "Arial";			lblformat.size = 70;			lblformat.align = "right";			pre.progressLabel.setStyle("textFormat", lblformat);		}			private function doJSONFailed(evt:Event):void	{		dispatchEvent(new Event("dataFailed"));	}	public function clickedThumbWithIndex(index:Number)	{		this.removeChild(gridView);		gridView = null;		//this.displaySlideWithIndex(index,true);		timeSlider.value = jsonObject['data']['slides'][index]['jumpstamp'];		trace("Set slider to value"+timeSlider.value);		timeSlider.dispatchEvent(new Event(Event.CHANGE));	}	//image Queue	function soundInited(event:LoaderEvent):void	{		soundInit = true;		if (startInit)		{			removeChild(pre);			initGUI();		}	}	function progressHandlerSound(event:LoaderEvent):void	{			}	function progressHandler(event:LoaderEvent):void	{		if (event.currentTarget == startQueue) {				pre.progressLabel.text = String(Math.round((soundQueue.bytesLoaded/soundQueue.bytesTotal)*100))+"%";		}		if (event.currentTarget == mainQueue)		{		}	}	function completeHandler(event:LoaderEvent):void	{		if (event.currentTarget == startQueue)		{			startInit = true;			if (soundInit)			{				removeChild(pre);				initGUI();			}		}		if (event.currentTarget == mainQueue)		{		}	}	function errorHandler(event:LoaderEvent):void	{		trace("error occured with " + event.target + ": " + event.text);	}}}