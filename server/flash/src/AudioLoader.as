/* * AudioLoader.as *  * Copyright (c) 2012 Hendrik Holtmann * All rights reserved. *  * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: *  * Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. *  * Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. * */package  {	import flash.net.URLRequest;	import flash.media.Sound;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.display.Sprite;		public class AudioLoader extends Sprite{				public var audioFile:String;		private var audioRequest:URLRequest;		private var soundObject:Sound;				public function AudioLoader(fileName:String) {			audioFile = fileName;		}				public function loadAudio()		{			audioRequest = new URLRequest("audio/"+audioFile);			soundObject = new Sound(audioRequest);			soundObject.addEventListener(Event.COMPLETE,soundDidLoad);			soundObject.addEventListener(IOErrorEvent.IO_ERROR,soundLoadDidFail);		}				private function soundDidLoad(evt:Event):void {			dispatchEvent(new Event("soundReady"));			removeListeners();		}				private function soundLoadDidFail(evt:Event):void {			trace("Sound load did fail");		}						public function returnLoadedSoundObject():Sound		{			return soundObject;		}					private function removeListeners():void		{			soundObject.removeEventListener(Event.COMPLETE,soundDidLoad);			soundObject.removeEventListener(IOErrorEvent.IO_ERROR,soundLoadDidFail);		}					}	}