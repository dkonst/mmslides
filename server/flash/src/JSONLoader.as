/* * JSONLoader.as *  * Copyright (c) 2012 Hendrik Holtmann * All rights reserved. *  * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: *  * Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. *  * Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. * */package {	import flash.display.Sprite;	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.events.IOErrorEvent;		import com.adobe.serialization.json.JSON;		public class JSONLoader extends Sprite	{		private var loader:URLLoader = new URLLoader() ;		private var request:URLRequest = new URLRequest();		public var jsonDecoded:Object = new Object();				public function JSONLoader(DataURL:String):void		{						var JSONString:String = DataURL;			//trace("JSONLoader - JSONString = "+JSONString);						var urlRequest:URLRequest = new URLRequest(JSONString);			//var urlLoader:URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, decodeJSON);			loader.addEventListener(IOErrorEvent.IO_ERROR, urlLoadErrorHandler);			loader.load(urlRequest);						loader.addEventListener(Event.COMPLETE, decodeJSON) ;						}				public function decodeJSON(event:Event):void		{							//trace("JSONLoader - Jason - "+event.target.data);			jsonDecoded = JSON.decode(event.target.data);					dispatchEvent (new Event("dataReady"));								removeListeners();		}				public function urlLoadErrorHandler(event:IOErrorEvent):void		{			trace("Jason - unable to load data");			dispatchEvent (new Event("dataFailed"));			removeListeners();		}					public function removeListeners():void		{			loader.removeEventListener(Event.COMPLETE, decodeJSON) ;			loader.removeEventListener(IOErrorEvent.IO_ERROR, urlLoadErrorHandler);					}				public function returnJsonDecoded():Object		{			//trace("Jason jsonDecoded - "+jsonDecoded);			return jsonDecoded		}				}}