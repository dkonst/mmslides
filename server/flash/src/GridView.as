/* * GridView.as *  * Copyright (c) 2012 Hendrik Holtmann * All rights reserved. *  * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: *  * Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. *  * Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. * */package  {		import flash.display.Sprite;	import com.greensock.loading.*;	import com.greensock.layout.*;	import com.greensock.events.LoaderEvent;	import flash.geom.ColorTransform;	import ThumbNail;	import com.adobe.utils.ArrayUtil;	import fl.controls.UIScrollBar;	import ScrollArea;	import fl.events.ScrollEvent;	import fl.controls.ScrollBar;	import flash.events.Event;	import mmslides;		public class GridView extends Sprite{		private var _slideArray:Array;		private var _numSlides:Number;		private var _folder:String;		private var mainQueue:LoaderMax;		private var minSpace:Number = 5;		private var thumbSize:Number = 75;		private var contentContainer:Sprite;		private var rowItems:Number;		private var numRows:Number;		private var scrollArea:ScrollArea;		private var mc:ScrollArea;		private var sb:ScrollBar;		private var _thumbQueue: LoaderMax;						public function GridView(slideArray:Array,width:Number,height:Number,folder:String,thumbLoader:LoaderMax) {			_slideArray = slideArray;			_numSlides = _slideArray.length			_folder = folder;			_thumbQueue = thumbLoader;						this.graphics.beginFill(0x424242);			this.graphics.drawRect(0,0,width,height);			this.graphics.endFill();			this.alpha = 0.8;     						rowItems = Math.floor(width / (thumbSize+minSpace));			numRows = Math.ceil(_numSlides/rowItems);									scrollArea = new ScrollArea();			scrollArea.x = this.x;			scrollArea.y = this.y;			scrollArea.addEventListener(Event.ADDED_TO_STAGE,initScrollArea);						mc= new ScrollArea();			mc.x = 0;			mc.y = 0;			mc.width = width;			mc.height = height;			this.mask = mc;						var sb:ScrollBar = new ScrollBar();			sb.x = this.x + this.width- 15;			sb.y = 5;			sb.height = mc.height -5;						sb.enabled = true;//			sb.setScrollProperties(mc.height, 0,  numRows*(thumbSize+minSpace)-this.height+10);			trace(scrollArea.height);			sb.addEventListener(ScrollEvent.SCROLL, scrollMC);						addChild(scrollArea);			addChild(mc);			addChild(sb);						/*			var scrollbar:UIScrollBar = new UIScrollBar();        	scrollbar.x = this.width - 25;        	scrollbar.y = 0;	        scrollbar.setSize(25, this.height);    	    scrollbar.visible = true;        	scrollbar.scrollTarget = this;        	this.addChild(scrollbar);			*/			drawPlaceHolders();			//loadImages();		}				private function initScrollArea(evt:Event):void		{			scrollArea.height = numRows*(thumbSize+minSpace);			scrollArea.width = width;			scrollArea.scaleX = 1;			scrollArea.scaleY = 1;			trace("INIT EVENT" + scrollArea.height);		}				private function scrollMC(event:ScrollEvent):void{			trace(-event.position);			scrollArea.y = -event.position + mc.y;		}				private function drawPlaceHolders()		{			mainQueue=  new LoaderMax({name:"gridViewQueue", onProgress:progressHandler, onComplete:completeHandler, onError:errorHandler});			var borderAll:Number = (this.width % rowItems) * (thumbSize+minSpace);						trace("Rows:"+rowItems);						var xPos:Number = 5;			var yPos:Number = 10;			var _total:int = 0;			for (var i:Number=0; i<numRows; i++) {				xPos = 5;				var limit:Number = rowItems;				if ((_numSlides - _total)< rowItems) {					limit = _numSlides - _total;				}								for (var j:Number=0; j<limit; j++) {					var thumb:ThumbNail = new ThumbNail();					thumb.x = xPos;					thumb.y = yPos;					thumb.index = _total;					thumb.width = thumb.height = thumbSize;					thumb.addEventListener("thumbClicked",thumbClicked);					xPos = xPos + 5 + thumbSize;					scrollArea.addChild(thumb);					//var loader:ImageLoader = new ImageLoader(_folder+"thumbs/"+_slideArray[_total]['file']+".thumb.jpg",{noCache:false,name:i, container:thumb, width:75, height:75});					thumb.addChild(_thumbQueue.getLoader("thumb"+_total).content);// 				  	var loader:ImageLoader = new ImageLoader("thumbs/"+_slideArray[counter]['file']+".thumb.jpg",{name:counter, container:thumb});					//mainQueue.append(loader);					_total++;				}				yPos = yPos + minSpace+thumbSize;			}			mainQueue.load();		}				private function loadImages()		{			mainQueue=  new LoaderMax({name:"gridViewQueue", onProgress:progressHandler, onComplete:completeHandler, onError:errorHandler});			for (var i:Number=0;i<_numSlides;i++) {				 var loader:ImageLoader = new ImageLoader("thumbs/"+_slideArray[i]['file']+".thumb.jpg",{name:i});				mainQueue.append(loader);			}			mainQueue.load();		}				function thumbClicked(event:Event):void		{			var baseClass:mmslides = mmslides(this.parent);			baseClass.clickedThumbWithIndex(ThumbNail(event.currentTarget).index);		}				//gridViewQueue Queue						function progressHandler(event:LoaderEvent):void {							}				function completeHandler(event:LoaderEvent):void {			trace("Loading of thumbs completed");		}				function errorHandler(event:LoaderEvent):void {			trace("error occured with " + event.target + ": " + event.text);		}	}	}